[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "1 Welcome to my practical assignment webside.\n\n\n2 Please find the link to my github repository below:\nhttps://github.com/Motheo28/Statistical-computing/tree/master/Project/Practical%201"
  },
  {
    "objectID": "Prac_1.html",
    "href": "Prac_1.html",
    "title": "2  Practical 1",
    "section": "",
    "text": "3 Cleaning the data\n\ncleaned_airquality &lt;- na.omit(airquality)\n\n\n\n4 Ozone stats\n\nmean(cleaned_airquality$Ozone)\n\n[1] 42.0991\n\nsd(cleaned_airquality$Ozone)\n\n[1] 33.27597\n\nmin(cleaned_airquality$Ozone)\n\n[1] 1\n\nmax(cleaned_airquality$Ozone)\n\n[1] 168\n\n\n\n\n5 Temp stats\n\nmean(cleaned_airquality$Temp)\n\n[1] 77.79279\n\nsd(cleaned_airquality$Temp)\n\n[1] 9.529969\n\nmin(cleaned_airquality$Temp)\n\n[1] 57\n\nmax(cleaned_airquality$Temp)\n\n[1] 97\n\n\n\n\n6 Extracting the matrices\n\nX &lt;- cbind(cars$speed)\nY &lt;- as.matrix(cars$dist,1)\nX_trans &lt;- t(X)\n\n\n\n7 Function for estimates\n\nEstimates &lt;- function(X,Y) {\nbeta &lt;- solve(X_trans%*%X)%*%X_trans%*%Y\n return(beta)\n}\nEstimates(X,Y)\n\n         [,1]\n[1,] 2.909132\n\n\n\n\n8 Using the build-in function to estimate the betas\n\nmod_pred &lt;- lm(dist~speed, data = cars)\nsummary(mod_pred)\n\n\nCall:\nlm(formula = dist ~ speed, data = cars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-29.069  -9.525  -2.272   9.215  43.201 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -17.5791     6.7584  -2.601   0.0123 *  \nspeed         3.9324     0.4155   9.464 1.49e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 15.38 on 48 degrees of freedom\nMultiple R-squared:  0.6511,    Adjusted R-squared:  0.6438 \nF-statistic: 89.57 on 1 and 48 DF,  p-value: 1.49e-12"
  },
  {
    "objectID": "Prac_2.html",
    "href": "Prac_2.html",
    "title": "3  Prac 2",
    "section": "",
    "text": "4 Step 1\nGenerating the data points\n\nset.seed(1)\nx &lt;- seq(1,100) \n\n\n\n5 Step 2\ngenerate Y as a noisy sine wave\n\nn = 100\nei &lt;- rnorm(n, mean = 0, sd = 0.2^2)\nY &lt;- numeric(n)  \nfor (i in 1:100) {\n  y_i &lt;- sin(x[i]/10)+ei\n  Y = y_i\n}\n\n\n\n6 Step 3\nBuilding the lowess function\n\ncustomLowess &lt;- function(x, y, f) {\n  \n  n = length(x)\n  k = ceiling(f*n)\n  yhat &lt;- numeric(n)\n  W &lt;- numeric(n)\n# finding the neighbours    \n  x_neighbour &lt;- numeric()\n  for (j in 1:n) {\n    x_j &lt;- x[j]\n    dist &lt;- abs(x - x_j)\n    dist_sort &lt;- order(dist)\n    x_neighbour = dist_sort[1:k]\n#Calculate weights on neighbours  \n  d_max &lt;- max(x_neighbour)\n  W = (1-(dist[x_neighbour]/d_max)^3)^3\n#create diagonal matrix of the weights on neigbours\n  W = diag(W)\n#create the X matrix\n  X &lt;- cbind(1,x[x_neighbour])\n  X_t &lt;- t(X)\n#fit regression\n  beta_hat &lt;- solve(X_t %*% W %*% X) %*% X_t %*% W %*% Y[x_neighbour]\n  yhat[j] = beta_hat[1] + beta_hat[2] %*% x[j]\n  }\n  #return the vector containing the yhat elements which are the smoothed out values for the x's\n  return(yhat)\n}\n\ncustom_vals &lt;- customLowess(x,Y,0.5)\n\n\n\n7 Step 4\nUsing the build in lowess function to compare\n\nact_val &lt;- lowess(x,Y,f=0.5, iter = 0)\n\n\n\n8 Step 5\nPlotting to compare\n\nplot(x, Y, ylab = \"Smoothed values\", xlab = \"x values\", main = \"Custom vs Built-in LOWESS\", col = \"gray\", pch = 16)\nlines(act_val, col = \"blue\", lwd = 2, lty = 2)   # Built-in LOWESS\nlines(custom_vals, col = \"red\", lwd = 2)  # Custom LOWESS"
  },
  {
    "objectID": "Prac_day_4.html",
    "href": "Prac_day_4.html",
    "title": "4  Prac Day 4",
    "section": "",
    "text": "5 Question 1\nflights &lt;- as_tibble(flights)\nprint(flights)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\ndist_tbl &lt;- flights |&gt;\n  filter(month == 1) |&gt;\n  group_by(carrier) |&gt;\n  summarise(mean_distance = mean(distance, na.rm = TRUE), sd_distance = sd(distance, na.rm = TRUE)) |&gt;\n  arrange(mean_distance)\n\nprint(dist_tbl)\n\n# A tibble: 16 × 3\n   carrier mean_distance sd_distance\n   &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n 1 YV               229          0  \n 2 9E               476.       334. \n 3 EV               522.       294. \n 4 US               536.       553. \n 5 MQ               566.       223. \n 6 FL               691.       142. \n 7 OO               733         NA  \n 8 WN               942.       496. \n 9 B6              1062.       681. \n10 DL              1220.       644. \n11 AA              1350.       626. \n12 UA              1462.       778. \n13 F9              1620          0  \n14 AS              2402          0  \n15 VX              2495.        98.2\n16 HA              4983          0\nnew_dataframe &lt;- flights |&gt;\n  group_by(month, carrier) |&gt;\n  summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) |&gt;\n  pivot_wider(names_from = carrier, values_from = avg_delay)\n\n`summarise()` has grouped output by 'month'. You can override using the\n`.groups` argument.\n\nView(new_dataframe)\nflights_filtered &lt;- filter(flights, dep_delay &gt; 0,arr_delay &lt;= 0)\nn = count(flights_filtered)\ntotal = count(flights)\n\nprob_delayed = n/total\nprob_delayed\n\n          n\n1 0.1052391\npoint 1. Finding routes\n# Counting the number of airlines per route\nnumber_per_route &lt;- flights |&gt;\n  group_by(origin, dest) |&gt;\n  summarise(num_airlines = n_distinct(carrier)) |&gt;\n  filter(num_airlines &gt; 1)\n\n`summarise()` has grouped output by 'origin'. You can override using the\n`.groups` argument.\n\n# Filter flights to keep only these routes\nmulti_routes &lt;- flights |&gt;\n  semi_join(number_per_route, by = c(\"origin\", \"dest\"))\nPoint 2. Calculating the average delay\navg_delay &lt;- multi_routes |&gt;\n  group_by(origin, dest, carrier) |&gt;\n  summarise(avg_delay = mean(arr_delay, na.rm = TRUE))\n\n`summarise()` has grouped output by 'origin', 'dest'. You can override using\nthe `.groups` argument.\nPoint 3. Identifying worst and best average delay arrival airline\navg_delay &lt;- avg_delay |&gt;\n  left_join(airlines, by = \"carrier\") |&gt;\n  rename(airline_name = name)\nReading in data\nq7_data &lt;- structure(list(id = c(\"id_1\", \"id_2\", \"id_3\", \"id_4\", \"id_5\", \n\"id_6\", \"id_7\", \"id_8\", \"id_9\", \"id_10\", \"id_11\", \"id_12\", \"id_13\", \n\"id_14\", \"id_15\", \"id_16\", \"id_17\", \"id_18\", \"id_19\", \"id_20\", \n\"id_21\", \"id_22\", \"id_23\", \"id_24\", \"id_25\", \"id_26\", \"id_27\", \n\"id_28\", \"id_29\", \"id_30\", \"id_31\", \"id_32\", \"id_33\", \"id_34\", \n\"id_35\", \"id_36\", \"id_37\", \"id_38\", \"id_39\", \"id_40\", \"id_41\", \n\"id_42\", \"id_43\", \"id_44\", \"id_45\", \"id_46\", \"id_47\", \"id_48\", \n\"id_49\", \"id_50\"), age = c(50L, 34L, 70L, 33L, 22L, 61L, 69L, \n73L, 62L, 56L, 71L, 33L, 73L, 44L, 45L, 46L, 24L, 70L, 46L, 76L, \n47L, 76L, 28L, 48L, 54L, 27L, 45L, 26L, 61L, 28L, 38L, 55L, 33L, \n36L, 62L, 58L, 72L, 31L, 34L, 51L, 61L, 64L, 26L, 28L, 60L, 29L, \n42L, 46L, 79L, 72L), gender = c(\"male\", \"male\", \"male\", \"female\", \n\"female\", \"male\", \"female\", \"male\", \"male\", \"female\", \"female\", \n\"male\", \"male\", \"female\", \"male\", \"male\", \"male\", \"male\", \"female\", \n\"male\", \"male\", \"male\", \"male\", \"female\", \"femal\", \"male\", \"female\", \n\"female\", \"female\", \"female\", \"male\", \"female\", \"female\", \"female\", \n\"male\", \"male\", \"female\", \"male\", \"female\", \"female\", \"male\", \n\"female\", \"female\", \"male\", \"male\", \"female\", \"male\", \"male\", \n\"male\", \"female\"), height = c(174.4, 197.7, 174.1, 194.5, NA, \n180.4, 170.5, 157.4, 196.8, 165.1, 153, 197.4, 186, 157.1, 177.5, \n197.7, 179.3, 170.2, 182.4, NA, 165.4, 161, 168.5, 199.2, 157.7, \n154.6, 157.1, 184.5, 181, 194.6, 183.6, 186.9, 176.1, 183, 191.1, \n189.3, 199, 172, 165.6, 170.5, 150.5, 159.2, 192.1, 161.6, 162, \n153.8, 162.3, 186.6, 192.4, 174.9), weight = c(69.4, 62.3, 55.6, \n69.5, 78.6, 60.8, 72.2, 60.9, 75.1, 67.7, 82.5, 68.7, 67.8, 76.7, \n87, 61.1, 70.6, 63.3, 81.5, 59.2, 93.2, 87.3, 83.4, 80.9, 68.6, \n76.5, 93.7, 79.1, 92, 65.6, 85.4, 63.3, 79.7, 74.1, 63.3, 78.2, \n95.7, 95.1, 63.7, 66.1, 99.3, 81, 96.9, 73.3, 70.3, 83, 57.6, \n78.6, 61.9, 98.1), blood_type = c(\"O\", \"A\", \"O\", \"O\", \"B\", \"AB\", \n\"O\", \"O\", \"O\", \"AB\", \"A\", \"O\", \"O\", \"O\", \"B\", \"A\", \"B\", \"AB\", \n\"O\", \"AB\", \"A\", \"AB\", \"O\", \"B\", \"A\", \"A\", \"B\", \"AB\", \"A\", \"B\", \n\"B\", \"A\", \"O\", \"O\", \"O\", \"B\", \"O\", \"A\", \"A\", \"B\", \"A\", \"O\", \"AB\", \n\"A\", \"A\", \"O\", \"O\", \"B\", \"A\", \"O\"), disease_status = c(\"diseased\", \n\"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"diseased\", \n\"healthy\", \"diseased\", \"Healthy\", \"diseased\", \"healthy\", \"diseased\", \n\"healthy\", \"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n\"healthy\", \"healthy\", \"diseased\", \"healthy\", \"diseased\", \"healthy\", \n\"healthy\", \"healthy\", \"healthy\", \"diseased\", \"diseased\", \"healthy\", \n\"healthy\", \"healthy\", \"diseased\", \"diseased\", \"diseased\", \"healthy\", \n\"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n\"diseased\", \"diseased\", \"diseased\", \"healthy\", \"healthy\", \"diseased\", \n\"diseased\"), cholesterol = c(228, 223, 213, 198, 166, 151, 195, \n199, 189, 196, 221, 156, 185, 230, 234, 174, 185, 236, 235, 180, \n165, 220, 160, 153, 250, 153, 184, 242, 212, 179, 224, 233, 181, \n199, 220, 214, 214, 248, 191, 162, 203, 173, 199, 187, 248, 189, \n173, 212, 164, 247), glucose = c(96, 78, 101, 119, 103, 91, 86, \nNA, 77, 80, 115, 85, 88, 109, NA, 71, 90, 94, 91, 87, 113, 93, \n97, 118, 109, 80, 85, 119, 99, 108, 89, 108, 97, 116, 79, 84, \n75, 81, 119, NA, 106, 109, 75, 82, 84, 75, 76, 120, 119, 77), \n    smoker = c(\"yes\", \"yes\", \"yes\", \"yes\", \"no\", \"yes\", \"no\", \n    \"yes\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \n    \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"no\", \n    \"no\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \n    \"no\", \"yes\", \"no\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\", \n    \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\"), exercise = c(\"occasional\", \n    \"regular\", \"occasional\", \"regular\", \"none\", \"occasional\", \n    \"regular\", \"none\", \"occasional\", \"none\", \"occasional\", \"none\", \n    \"none\", \"regular\", \"occasional\", \"none\", \"regular\", \"regular\", \n    \"none\", \"occasional\", \"none\", \"occasional\", \"occasional\", \n    \"occasional\", \"regular\", \"occasional\", \"regular\", \"regular\", \n    \"regular\", \"occasional\", \"occasional\", \"none\", \"none\", \"regular\", \n    \"occasional\", \"occasional\", \"none\", \"none\", \"none\", \"none\", \n    \"occasional\", \"regular\", \"regular\", \"none\", \"regular\", \"occasional\", \n    \"occasional\", \"none\", \"occasional\", \"regular\"), income = c(84820L, \n    81547L, 22588L, 72490L, 74533L, 25338L, 41469L, 57315L, 63629L, \n    88662L, 62615L, 56261L, 58499L, 82232L, 77584L, 77275L, 38468L, \n    54510L, 91326L, 78611L, 31402L, 29586L, 21441L, 58269L, 84173L, \n    88295L, 37940L, 43750L, 69750L, 92356L, 82518L, 91455L, 68866L, \n    51178L, 68275L, 27689L, 35418L, 81318L, 62405L, 86851L, 25654L, \n    47553L, 74474L, 51409L, 22607L, 55360L, 96351L, 21516L, 41927L, \n    55810L), education = c(\"master\", \"bachelor\", \"PhD\", \"master\", \n    \"bachelor\", \"highschool\", \"PhD\", \"highschool\", \"PhD\", \"PhD\", \n    \"bachelor\", \"highschool\", \"master\", \"bachelor\", \"PhD\", \"PhD\", \n    \"PhD\", \"bachelor\", \"master\", \"highschool\", \"PhD\", \"highschool\", \n    \"bachelor\", \"master\", \"highschool\", \"highschool\", \"master\", \n    \"master\", \"bachelor\", \"PhD\", \"highschool\", \"PhD\", \"master\", \n    \"master\", \"master\", \"PhD\", \"highschool\", \"master\", \"master\", \n    \"highschool\", \"bachelor\", \"highschool\", \"bachelor\", \"PhD\", \n    \"bachelor\", \"highschool\", \"master\", \"highschool\", \"bachelor\", \n    \"bachelor\"), region = c(\"North\", \"South\", \"North\", \"West\", \n    \"North\", \"West\", \"South\", \"South\", \"West\", \"South\", \"West\", \n    \"South\", \"West\", \"East\", \"North\", \"West\", \"North\", \"North\", \n    \"West\", \"North\", \"East\", \"West\", \"South\", \"North\", \"North\", \n    \"East\", \"East\", \"North\", \"North\", \"West\", \"South\", \"West\", \n    \"West\", \"East\", \"West\", \"North\", \"West\", \"North\", \"East\", \n    \"North\", \"West\", \"South\", \"South\", \"East\", \"North\", \"West\", \n    \"West\", \"East\", \"North\", \"East\"), marital_status = c(\"divorced\", \n    \"single\", \"divorced\", \"divorced\", \"divorced\", \"divorced\", \n    \"divorced\", \"married\", \"divorced\", \"married\", \"divorced\", \n    \"widowed\", \"married\", \"single\", \"widowed\", \"widowed\", \"single\", \n    \"divorced\", \"widowed\", \"widowed\", \"single\", \"married\", \"single\", \n    \"married\", \"widowed\", \"married\", \"single\", \"single\", \"widowed\", \n    \"married\", \"widowed\", \"divorced\", \"single\", \"married\", \"single\", \n    \"widowed\", \"widowed\", \"married\", \"widowed\", \"divorced\", \"married\", \n    \"married\", \"divorced\", \"single\", \"married\", \"widowed\", \"divorced\", \n    \"divorced\", \"single\", \"divorced\")), row.names = c(NA, -50L\n), class = c(\"tbl_df\", \"tbl\", \"data.frame\"))\nIdentifying Inconsistencies\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n  install.packages(\"remotes\")\n}\nremotes::install_github(\"SATVILab/UtilsDataRSV\")\n\nUsing GitHub PAT from the git credential store.\n\n\nSkipping install of 'UtilsDataRSV' from a github remote, the SHA1 (c7018542) has not changed since last install.\n  Use `force = TRUE` to force installation\n\n#Viewing the tibble\nUtilsDataRSV::view_cols(q7_data)\n\n[1] \"id\"\n [1] \"id_4\"  \"id_3\"  \"id_29\" \"id_21\" \"id_49\" \"id_1\"  \"id_2\"  \"id_36\" \"id_12\"\n[10] \"id_16\" \"id_47\" \"id_10\" \"id_35\" \"id_50\" \"id_15\" \"id_13\" \"id_18\" \"id_20\"\n[19] \"id_5\"  \"id_9\" \n[1] \"30 unique entries not displayed\"\n[1] \"_____________________\"\n[1] \"age\"\n[1] 26 55 38 46 48\n[1] \"_____________________\"\n[1] \"gender\"\n[1] \"female\" \"femal\"  \"male\"  \n[1] \"_____________________\"\n[1] \"height\"\n[1] 165.1 182.4 154.6 165.6    NA\n[1] \"_____________________\"\n[1] \"weight\"\n[1] 95.1 81.5 70.3 63.3 87.0\n[1] \"_____________________\"\n[1] \"blood_type\"\n[1] \"O\"  \"B\"  \"A\"  \"AB\"\n[1] \"_____________________\"\n[1] \"disease_status\"\n[1] \"healthy\"  \"diseased\" \"Healthy\" \n[1] \"_____________________\"\n[1] \"cholesterol\"\n[1] 248 198 214 196 191\n[1] \"_____________________\"\n[1] \"glucose\"\n[1]  80  75 119 108  NA\n[1] \"_____________________\"\n[1] \"smoker\"\n[1] \"no\"  \"yes\"\n[1] \"_____________________\"\n[1] \"exercise\"\n[1] \"none\"       \"regular\"    \"occasional\"\n[1] \"_____________________\"\n[1] \"income\"\n[1] 35418 84173 91326 82518 22588\n[1] \"_____________________\"\n[1] \"education\"\n[1] \"PhD\"        \"master\"     \"bachelor\"   \"highschool\"\n[1] \"_____________________\"\n[1] \"region\"\n[1] \"West\"  \"East\"  \"South\" \"North\"\n[1] \"_____________________\"\n[1] \"marital_status\"\n[1] \"married\"  \"single\"   \"widowed\"  \"divorced\"\n[1] \"_____________________\"\n\n\nWarning: Not all unique entries displayed for these non-numeric cols: id"
  },
  {
    "objectID": "Prac_day_4.html#setting-up",
    "href": "Prac_day_4.html#setting-up",
    "title": "4  Prac Day 4",
    "section": "4.1 Setting up",
    "text": "4.1 Setting up\n\n# Install tidyverse if not already installed\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Install and load nycflights13 for flight data\nif (!requireNamespace(\"nycflights13\", quietly = TRUE)) {\n  install.packages(\"nycflights13\")\n}\nlibrary(nycflights13)\n\npkg_vec &lt;- c(\"tidyverse\", \"nycflights13\", \"tibble\")\nfor (x in pkg_vec) {\n  if (!requireNamespace(x, quietly = TRUE)) {\n    install.packages(x)\n  }\n}\nlibrary(nycflights13)\nlibrary(tidyverse)\nlibrary(tibble)\ndata(flights, package = \"nycflights13\")"
  }
]