[
  {
    "objectID": "index.html#welcome-to-my-practical-2-site.",
    "href": "index.html#welcome-to-my-practical-2-site.",
    "title": "index",
    "section": "0.1 Welcome to my practical 2 site.",
    "text": "0.1 Welcome to my practical 2 site."
  },
  {
    "objectID": "index.html#find-the-link-to-my-github-repository-below",
    "href": "index.html#find-the-link-to-my-github-repository-below",
    "title": "index",
    "section": "0.2 Find the link to my github repository below:",
    "text": "0.2 Find the link to my github repository below:"
  },
  {
    "objectID": "Practical 2.html",
    "href": "Practical 2.html",
    "title": "2  Practical 2",
    "section": "",
    "text": "3 Question 2\nlibrary(doParallel)\n\nLoading required package: iterators\n\n\nLoading required package: parallel\n\nlibrary(MASS)\n\n\ncl &lt;- makeCluster(3)\nregisterDoParallel(cl)\n\nboot.sample &lt;- matrix(0, nrow = 1000)\ntime1 &lt;- system.time({\n  y &lt;- foreach(j = 1: 1000, .combine = c, .packages = 'MASS') %dopar% {\n  \n  sampl &lt;- sample(galaxies, size = 82, replace = TRUE)\n  sample_median &lt;- median(sampl)\n  boot.sample[j] = sample_median\n}\n})\nstopCluster(cl)\ncat(\"Parallel time:\",time1)\n\nParallel time: 0.25 0.1 0.54 NA NA\n\n#Parallel Processing time\ntime2 &lt;- system.time({\n  result &lt;- foreach ( j = 1:1000) %do% {\n    \n  sampl &lt;- sample(galaxies, size = 82, replace = TRUE)\n  sample_median &lt;- median(sampl)\n  boot.sample[j] = sample_median\n  \n  }\n})\ncat(\"serial time:\",time2)\n\nserial time: 0.28 0.02 0.28 NA NA\nlibrary(foreach)\nlibrary(doParallel)\n\nset.seed(1)\nn &lt;- 50\nmean.1 &lt;- 1\nB &lt;- 1000\n\n# Set up parallel backend\nnumCores &lt;- makeCluster(3)  # Use all but one core\nregisterDoParallel(numCores)\n\n# Perform the bootstrap using foreach\ncount &lt;- foreach(i = 1:B, .combine = '+') %do% {\n  u &lt;- rexp(n, rate = 1)  # Generate random sample\n  bstr &lt;- replicate(B, mean(sample(u, replace = TRUE)))  # Bootstrap samples\n  c1 &lt;- quantile(bstr, c(0.025, 0.975))\n  \n  # Check if the true mean is within the interval\n  if (c1[1]&lt;= mean.1 && mean.1 &lt;= c1[2]) {\n     return(1)\n  }\n  else {\n    return(0)\n  }\n}\n\n# Calculate coverage probability\ncoverage &lt;- count / B\n# Stop the cluster\nstopCluster(numCores)\n\n# Print result\n\ncat(\"Estimated coverage:\",coverage)\n\nEstimated coverage: 0.936\nlibrary(foreach)\n\nset.seed(1234)\nresult &lt;- foreach(i = 1:3) %do% {\n  it &lt;- irnorm(5)\n  nextElem(it)\n  nextElem(it)\n  nextElem(it)\n  nextElem(it)\n  nextElem(it)\n\n}\n\nfor (i in 1:3) {\n  maxi &lt;- max(result[[i]])\n  cat(\"Max for sample\",i,\":\",maxi, \"\\n\")\n}\n\nMax for sample 1 : 0.4595894 \nMax for sample 2 : -0.49685 \nMax for sample 3 : 2.070271\nlibrary(parallel)\n\nseed &lt;- set.seed(1234)\nresult &lt;- function() {\n  it &lt;- irnorm(5)\n  nextElem(it)\n  nextElem(it)\n  nextElem(it)\n  nextElem(it)\n  nextElem(it)\n}\n\n# For the foreach\ntime11 &lt;- system.time({\nresult1 &lt;- foreach(i = 1:3) %do% {\n  result()\n}\n\nfor (i in 1:3) {\n  maxi &lt;- max(result1[[i]])\n  cat(\"Max for sample\",i,\":\",maxi, \"\\n\")\n}\n})\n\nMax for sample 1 : 0.4595894 \nMax for sample 2 : -0.49685 \nMax for sample 3 : 2.070271 \n\ncat(\"time for the foreach loop:\",time11)\n\ntime for the foreach loop: 0 0 0.02 NA NA\n\n#For the parLapply\ncl &lt;- makeCluster(3)\nclusterExport(cl, \"result\")\ninvisible(clusterEvalQ(cl, library(iterators)))\n # Setting the seed for parLapply\nset.seed(1234)\ntime22 &lt;- system.time({\nparL &lt;- parLapply(cl, 1:3, function(i){\n  result()\n\n})\n\nfor (i in 1:3) {\n  maxi &lt;- max(parL[[i]])\n  cat(\"Max for sample\",i,\":\",maxi, \"\\n\")\n}\n})\n\nMax for sample 1 : 1.125014 \nMax for sample 2 : 1.477607 \nMax for sample 3 : 1.259633 \n\ncat(\"time for parLappy:\",time22)\n\ntime for parLappy: 0 0 0.02 NA NA\n\nstopCluster(cl)\n\n# for replicate\nset.seed(1234)\ntime33 &lt;- system.time({\nresult2 &lt;- replicate(n = 3, result())\n\nfor (i in 1:3) {\n  maxi &lt;- max(result2[,i])\n  cat(\"Max for sample\",i,\":\",maxi, \"\\n\")\n}\n})\n\nMax for sample 1 : 0.4595894 \nMax for sample 2 : -0.49685 \nMax for sample 3 : 2.070271 \n\ncat(\"time for replicate:\",time33)\n\ntime for replicate: 0.02 0 0 NA NA"
  },
  {
    "objectID": "Practical 2.html#question-1",
    "href": "Practical 2.html#question-1",
    "title": "2  Practical 2",
    "section": "2.1 Question 1",
    "text": "2.1 Question 1\n\nlibrary(foreach)\nlibrary(knitr)\n\n x &lt;- foreach(i = 1:100, .combine = rbind) %do% {\n    samp &lt;-  rexp(100,1)\n    mean &lt;- mean(samp)\n    variance &lt;- var(samp)\n    \n    c(mean, variance)\n }\n x_df &lt;- as.data.frame(x)\ncolnames(x_df) &lt;- c(\"Mean\", \"Variance\")\nkable(x_df)  \n\n\n\n\n\nMean\nVariance\n\n\n\n\nresult.1\n1.0825849\n1.2769856\n\n\nresult.2\n1.1140620\n1.1550662\n\n\nresult.3\n0.8420255\n0.5301332\n\n\nresult.4\n0.9047350\n0.7367483\n\n\nresult.5\n0.9413345\n0.5892874\n\n\nresult.6\n0.7006921\n0.3808087\n\n\nresult.7\n0.9094243\n0.7498078\n\n\nresult.8\n0.8298665\n1.0074946\n\n\nresult.9\n0.9423481\n0.9446587\n\n\nresult.10\n1.0132166\n0.8458102\n\n\nresult.11\n1.1075966\n1.1320742\n\n\nresult.12\n1.0672558\n0.9601273\n\n\nresult.13\n0.9166597\n0.9393286\n\n\nresult.14\n0.9487602\n0.7567655\n\n\nresult.15\n0.9589704\n0.9307374\n\n\nresult.16\n1.0098460\n1.0759081\n\n\nresult.17\n1.0341211\n0.9480786\n\n\nresult.18\n1.0112322\n0.9357385\n\n\nresult.19\n1.0099403\n0.8605606\n\n\nresult.20\n0.8601969\n0.8438897\n\n\nresult.21\n0.7859801\n0.4365826\n\n\nresult.22\n0.9959558\n0.9496472\n\n\nresult.23\n1.1411682\n1.5591590\n\n\nresult.24\n0.8018993\n0.5525719\n\n\nresult.25\n1.1272429\n0.8771897\n\n\nresult.26\n0.9439663\n0.8407424\n\n\nresult.27\n0.9197294\n1.0477048\n\n\nresult.28\n0.9430838\n0.5979559\n\n\nresult.29\n0.9144776\n0.7617152\n\n\nresult.30\n0.9257203\n0.7904611\n\n\nresult.31\n1.0306121\n0.7472600\n\n\nresult.32\n1.0259941\n0.8331351\n\n\nresult.33\n0.9358944\n0.8842009\n\n\nresult.34\n0.9560309\n0.8635112\n\n\nresult.35\n1.1958692\n1.3650741\n\n\nresult.36\n1.0146620\n0.7698155\n\n\nresult.37\n1.0041116\n1.4412188\n\n\nresult.38\n0.9339646\n0.8711996\n\n\nresult.39\n0.8958157\n0.7508005\n\n\nresult.40\n0.9805343\n0.8445043\n\n\nresult.41\n0.9865942\n0.8589570\n\n\nresult.42\n0.9819652\n1.3855729\n\n\nresult.43\n1.0773040\n1.6353862\n\n\nresult.44\n1.0843142\n0.8038374\n\n\nresult.45\n1.0289556\n1.0702796\n\n\nresult.46\n0.9551033\n1.0466821\n\n\nresult.47\n1.0128789\n1.1797369\n\n\nresult.48\n0.8109237\n0.5111649\n\n\nresult.49\n0.9395914\n0.6034895\n\n\nresult.50\n0.9710526\n0.9614582\n\n\nresult.51\n1.0186761\n0.7163916\n\n\nresult.52\n0.9615137\n1.1661825\n\n\nresult.53\n1.2076364\n1.5685968\n\n\nresult.54\n1.0748629\n1.1535996\n\n\nresult.55\n1.0765273\n2.0473663\n\n\nresult.56\n1.0363035\n0.9092947\n\n\nresult.57\n1.0071264\n1.0478690\n\n\nresult.58\n0.9759865\n0.9130266\n\n\nresult.59\n0.9185520\n0.9498600\n\n\nresult.60\n0.7917506\n0.5788654\n\n\nresult.61\n0.9904445\n0.7606083\n\n\nresult.62\n0.9370109\n0.9977016\n\n\nresult.63\n0.9454501\n0.8721044\n\n\nresult.64\n0.9988974\n1.0304740\n\n\nresult.65\n0.9527744\n0.7428766\n\n\nresult.66\n0.8827851\n0.8208145\n\n\nresult.67\n1.1347103\n1.2207332\n\n\nresult.68\n1.1337429\n1.6652401\n\n\nresult.69\n0.8807948\n0.9060373\n\n\nresult.70\n0.8859319\n0.8808551\n\n\nresult.71\n1.2233874\n1.2588734\n\n\nresult.72\n0.8875609\n0.6738084\n\n\nresult.73\n1.0573072\n1.2015054\n\n\nresult.74\n1.1182637\n1.5970371\n\n\nresult.75\n0.8590287\n0.5996808\n\n\nresult.76\n0.9987409\n0.6245048\n\n\nresult.77\n0.8890177\n1.2514235\n\n\nresult.78\n1.1605569\n1.2677126\n\n\nresult.79\n1.0474394\n1.0011610\n\n\nresult.80\n1.0480640\n1.0332765\n\n\nresult.81\n1.0411365\n1.2536231\n\n\nresult.82\n1.0569905\n1.8870819\n\n\nresult.83\n0.8721886\n0.7960396\n\n\nresult.84\n1.1510795\n0.8384835\n\n\nresult.85\n1.0356585\n0.9723750\n\n\nresult.86\n1.0037771\n1.1358814\n\n\nresult.87\n0.9763148\n1.0492774\n\n\nresult.88\n1.0051924\n1.1943717\n\n\nresult.89\n1.0060000\n0.8640365\n\n\nresult.90\n1.1840130\n1.1101127\n\n\nresult.91\n1.0907518\n1.0383357\n\n\nresult.92\n0.8748633\n0.8320545\n\n\nresult.93\n1.0300003\n0.8369074\n\n\nresult.94\n0.9731522\n0.8150476\n\n\nresult.95\n1.0053838\n1.0597140\n\n\nresult.96\n0.8190356\n0.6989242\n\n\nresult.97\n0.8827329\n0.6298749\n\n\nresult.98\n1.0303040\n0.8693458\n\n\nresult.99\n1.1611503\n1.0078270\n\n\nresult.100\n0.9430754\n0.9965588"
  }
]