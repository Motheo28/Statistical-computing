[
  {
    "objectID": "index.html#welcome-to-my-practical-2-site.",
    "href": "index.html#welcome-to-my-practical-2-site.",
    "title": "index",
    "section": "0.1 Welcome to my practical 2 site.",
    "text": "0.1 Welcome to my practical 2 site."
  },
  {
    "objectID": "index.html#find-the-link-to-my-github-repository-below",
    "href": "index.html#find-the-link-to-my-github-repository-below",
    "title": "index",
    "section": "0.2 Find the link to my github repository below:",
    "text": "0.2 Find the link to my github repository below:\nhttps://github.com/Motheo28/Statistical-computing/tree/master/Project/Practical%202/Practical%202"
  },
  {
    "objectID": "Practical 2.html",
    "href": "Practical 2.html",
    "title": "2  Practical 2",
    "section": "",
    "text": "3 Question 2\nlibrary(doParallel)\n\nLoading required package: iterators\n\n\nLoading required package: parallel\n\nlibrary(MASS)\n\n\ncl &lt;- makeCluster(3)\nregisterDoParallel(cl)\n\nboot.sample &lt;- matrix(0, nrow = 1000)\ntime1 &lt;- system.time({\n  y &lt;- foreach(j = 1: 1000, .combine = c, .packages = 'MASS') %dopar% {\n  \n  sampl &lt;- sample(galaxies, size = 82, replace = TRUE)\n  sample_median &lt;- median(sampl)\n  boot.sample[j] = sample_median\n}\n})\nstopCluster(cl)\ncat(\"Parallel time:\",time1)\n\nParallel time: 0.27 0.09 0.47 NA NA\n\n#Parallel Processing time\ntime2 &lt;- system.time({\n  result &lt;- foreach ( j = 1:1000) %do% {\n    \n  sampl &lt;- sample(galaxies, size = 82, replace = TRUE)\n  sample_median &lt;- median(sampl)\n  boot.sample[j] = sample_median\n  \n  }\n})\ncat(\"serial time:\",time2)\n\nserial time: 0.24 0.02 0.25 NA NA\nlibrary(foreach)\nlibrary(doParallel)\n\nset.seed(1)\nn &lt;- 50\nmean.1 &lt;- 1\nB &lt;- 1000\n\n# Set up parallel backend\nnumCores &lt;- makeCluster(3)  # Use all but one core\nregisterDoParallel(numCores)\n\n# Perform the bootstrap using foreach\ncount &lt;- foreach(i = 1:B, .combine = '+') %do% {\n  u &lt;- rexp(n, rate = 1)  # Generate random sample\n  bstr &lt;- replicate(B, mean(sample(u, replace = TRUE)))  # Bootstrap samples\n  c1 &lt;- quantile(bstr, c(0.025, 0.975))\n  \n  # Check if the true mean is within the interval\n  if (c1[1]&lt;= mean.1 && mean.1 &lt;= c1[2]) {\n     return(1)\n  }\n  else {\n    return(0)\n  }\n}\n\n# Calculate coverage probability\ncoverage &lt;- count / B\n# Stop the cluster\nstopCluster(numCores)\n\n# Print result\n\ncat(\"Estimated coverage:\",coverage)\n\nEstimated coverage: 0.936\nlibrary(foreach)\n\nset.seed(1234)\nresult &lt;- foreach(i = 1:3) %do% {\n  it &lt;- irnorm(5)\n  nextElem(it)\n  nextElem(it)\n  nextElem(it)\n  nextElem(it)\n  nextElem(it)\n\n}\n\nfor (i in 1:3) {\n  maxi &lt;- max(result[[i]])\n  cat(\"Max for sample\",i,\":\",maxi, \"\\n\")\n}\n\nMax for sample 1 : 0.4595894 \nMax for sample 2 : -0.49685 \nMax for sample 3 : 2.070271\nlibrary(parallel)\n\nseed &lt;- set.seed(1234)\nresult &lt;- function() {\n  it &lt;- irnorm(5)\n  nextElem(it)\n  nextElem(it)\n  nextElem(it)\n  nextElem(it)\n  nextElem(it)\n}\n\n# For the foreach\ntime11 &lt;- system.time({\nresult1 &lt;- foreach(i = 1:3) %do% {\n  result()\n}\n\nfor (i in 1:3) {\n  maxi &lt;- max(result1[[i]])\n  cat(\"Max for sample\",i,\":\",maxi, \"\\n\")\n}\n})\n\nMax for sample 1 : 0.4595894 \nMax for sample 2 : -0.49685 \nMax for sample 3 : 2.070271 \n\ncat(\"time for the foreach loop:\",time11)\n\ntime for the foreach loop: 0.02 0 0.02 NA NA\n\n#For the parLapply\ncl &lt;- makeCluster(3)\nclusterExport(cl, \"result\")\ninvisible(clusterEvalQ(cl, library(iterators)))\n # Setting the seed for parLapply\nset.seed(1234)\ntime22 &lt;- system.time({\nparL &lt;- parLapply(cl, 1:3, function(i){\n  result()\n\n})\n\nfor (i in 1:3) {\n  maxi &lt;- max(parL[[i]])\n  cat(\"Max for sample\",i,\":\",maxi, \"\\n\")\n}\n})\n\nMax for sample 1 : 0.4272016 \nMax for sample 2 : 0.8933405 \nMax for sample 3 : 0.8269572 \n\ncat(\"time for parLappy:\",time22)\n\ntime for parLappy: 0.02 0 0 NA NA\n\nstopCluster(cl)\n\n# for replicate\nset.seed(1234)\ntime33 &lt;- system.time({\nresult2 &lt;- replicate(n = 3, result())\n\nfor (i in 1:3) {\n  maxi &lt;- max(result2[,i])\n  cat(\"Max for sample\",i,\":\",maxi, \"\\n\")\n}\n})\n\nMax for sample 1 : 0.4595894 \nMax for sample 2 : -0.49685 \nMax for sample 3 : 2.070271 \n\ncat(\"time for replicate:\",time33)\n\ntime for replicate: 0 0 0 NA NA"
  },
  {
    "objectID": "Practical 2.html#question-1",
    "href": "Practical 2.html#question-1",
    "title": "2  Practical 2",
    "section": "2.1 Question 1",
    "text": "2.1 Question 1\n\nlibrary(foreach)\nlibrary(knitr)\n\n x &lt;- foreach(i = 1:100, .combine = rbind) %do% {\n    samp &lt;-  rexp(100,1)\n    mean &lt;- mean(samp)\n    variance &lt;- var(samp)\n    \n    c(mean, variance)\n }\n x_df &lt;- as.data.frame(x)\ncolnames(x_df) &lt;- c(\"Mean\", \"Variance\")\nkable(x_df)  \n\n\n\n\n\nMean\nVariance\n\n\n\n\nresult.1\n1.0522147\n1.4064567\n\n\nresult.2\n1.1001215\n1.2547074\n\n\nresult.3\n0.8430766\n0.8320787\n\n\nresult.4\n1.1090702\n1.0221289\n\n\nresult.5\n0.8986680\n1.1260802\n\n\nresult.6\n1.1725116\n1.8089856\n\n\nresult.7\n0.9819852\n0.9490465\n\n\nresult.8\n1.0676373\n1.1790654\n\n\nresult.9\n0.9818388\n0.7417059\n\n\nresult.10\n0.8323799\n0.4535256\n\n\nresult.11\n1.0266896\n1.0233128\n\n\nresult.12\n0.9033698\n0.9128695\n\n\nresult.13\n1.0263629\n0.9373915\n\n\nresult.14\n1.0198187\n0.8063554\n\n\nresult.15\n0.8377357\n0.8864245\n\n\nresult.16\n1.1137638\n0.8032100\n\n\nresult.17\n1.0260234\n1.0870635\n\n\nresult.18\n0.9382800\n1.2772843\n\n\nresult.19\n0.9826335\n1.0359468\n\n\nresult.20\n1.0196575\n0.7238840\n\n\nresult.21\n0.8959903\n0.8749435\n\n\nresult.22\n0.8744787\n0.8273076\n\n\nresult.23\n0.9789812\n0.8759983\n\n\nresult.24\n1.1994981\n1.5638110\n\n\nresult.25\n1.0455071\n1.1894874\n\n\nresult.26\n0.9798018\n0.8433701\n\n\nresult.27\n1.0967469\n1.1288660\n\n\nresult.28\n1.0416981\n0.8412919\n\n\nresult.29\n1.1133872\n1.1695205\n\n\nresult.30\n1.1268194\n1.0221410\n\n\nresult.31\n0.8845196\n0.6465386\n\n\nresult.32\n1.0953704\n1.2003243\n\n\nresult.33\n0.9575082\n0.9512037\n\n\nresult.34\n1.1383694\n0.9024045\n\n\nresult.35\n0.8839422\n0.6085735\n\n\nresult.36\n1.1015168\n1.0722105\n\n\nresult.37\n0.9324455\n0.8418438\n\n\nresult.38\n0.9590276\n0.8861859\n\n\nresult.39\n1.0372171\n1.2627834\n\n\nresult.40\n0.9754713\n0.7994055\n\n\nresult.41\n1.0852109\n1.1223347\n\n\nresult.42\n1.0094567\n1.0091967\n\n\nresult.43\n1.0344740\n0.7764220\n\n\nresult.44\n1.0079521\n0.8975407\n\n\nresult.45\n1.2542920\n1.4884673\n\n\nresult.46\n1.0490465\n0.9592726\n\n\nresult.47\n0.8891745\n0.6942837\n\n\nresult.48\n0.9516941\n1.3520360\n\n\nresult.49\n1.0753336\n0.9851664\n\n\nresult.50\n1.2419192\n0.9822056\n\n\nresult.51\n1.0111846\n0.9678130\n\n\nresult.52\n1.0470407\n0.9223183\n\n\nresult.53\n0.9977484\n0.8374602\n\n\nresult.54\n1.0272819\n0.8555166\n\n\nresult.55\n0.8728401\n0.7212034\n\n\nresult.56\n1.0271633\n0.9214510\n\n\nresult.57\n0.7606097\n0.5932110\n\n\nresult.58\n0.8936451\n0.8187160\n\n\nresult.59\n1.0082069\n1.0605772\n\n\nresult.60\n0.9337926\n0.7404620\n\n\nresult.61\n1.0467300\n0.8162398\n\n\nresult.62\n1.0498131\n0.9611980\n\n\nresult.63\n0.8244372\n0.6124889\n\n\nresult.64\n0.9464868\n0.7278929\n\n\nresult.65\n1.0329730\n0.9327401\n\n\nresult.66\n0.9009158\n0.6077029\n\n\nresult.67\n0.8859487\n0.9929478\n\n\nresult.68\n0.9639635\n0.9651959\n\n\nresult.69\n1.0381595\n0.9931290\n\n\nresult.70\n1.0098643\n1.0610800\n\n\nresult.71\n1.0580919\n0.7885637\n\n\nresult.72\n1.0653119\n0.9117107\n\n\nresult.73\n0.8300758\n0.5978238\n\n\nresult.74\n0.9114616\n0.6266294\n\n\nresult.75\n0.9411155\n1.1027921\n\n\nresult.76\n0.9888865\n0.8590063\n\n\nresult.77\n0.9729913\n0.8146715\n\n\nresult.78\n0.9952647\n1.2263905\n\n\nresult.79\n0.9636749\n1.3744764\n\n\nresult.80\n0.9968257\n1.0975039\n\n\nresult.81\n1.0835101\n1.1885131\n\n\nresult.82\n1.0804598\n1.0260533\n\n\nresult.83\n1.0905234\n0.9809418\n\n\nresult.84\n0.9908894\n1.1404995\n\n\nresult.85\n0.9287925\n0.7382612\n\n\nresult.86\n1.0195777\n0.9605902\n\n\nresult.87\n0.8441076\n0.4851727\n\n\nresult.88\n0.9169098\n0.5032008\n\n\nresult.89\n0.9830396\n0.9844603\n\n\nresult.90\n1.0727453\n1.0785473\n\n\nresult.91\n1.0446183\n0.9282054\n\n\nresult.92\n1.2350367\n1.5978083\n\n\nresult.93\n1.0914220\n1.3318746\n\n\nresult.94\n1.0299239\n0.8266400\n\n\nresult.95\n1.0282671\n1.2279065\n\n\nresult.96\n1.0697891\n1.2510951\n\n\nresult.97\n1.0719028\n1.6859374\n\n\nresult.98\n0.9519130\n1.0279978\n\n\nresult.99\n1.0146951\n0.9327669\n\n\nresult.100\n0.9123479\n0.6376218"
  }
]