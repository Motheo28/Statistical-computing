---
title: "Prac 2"
format: html
editor: visual
---

## Question 1

```{r}
library(foreach)

```

```{r}
 x <- foreach(i = 1:100) %do% {
    samp <-  rexp(100,1)
    mean <- mean(samp)
    variance <- var(samp)
    
    result <- rbind(mean, variance)
 }
 x
```

# Question 2

```{r}
library(doParallel)
library(MASS)

```

```{r}


# define a function that does the bootstrap samples in oone go
bootstrap <- function(data, num = 1000) {
  
  smpl <- matrix(sample(1:num,size = length(data)* num, replace = TRUE), nrow = length(data))
  
}



cl <- makeCluster(3)
registerDoParallel(cl)

#galaxies <- galaxies
boot.sample <- matrix(0, nrow = 1000)
system.time({
  y <- foreach(j = 1: 1000, .combine = c) %dopar% {
  
  sampl <- sample(galaxies, size = 82, replace = TRUE)
  sample_median <- median(sampl)
  boot.sample[j] = sample_median
}
})

stopCluster(cl)
#result <- median(boot.sample)
#result

#Checking the processig time
#Serial Processing time
 

#Parallel Processing time
system.time({
  result <- for (J in 1:1000) {
    
  sampl <- sample(galaxies, size = 82, replace = TRUE)
  sample_median <- median(sampl)
  boot.sample[j] = sample_median
  
  }
})
```

# Question 4

```{r}

library(foreach)

set.seed(1234)
result <- foreach(i = 1:3) %do% {
  it <- irnorm(5)
  nextElem(it)
  nextElem(it)
  nextElem(it)
  nextElem(it)
  nextElem(it)

}

for (i in 1:3) {
  maxi <- max(result[[i]])
  print(maxi)
}


```

# Question 5

```{r}

library(parallel)

set.seed(1234)
result <- function() {
  it <- irnorm(5)
  nextElem(it)
  nextElem(it)
  nextElem(it)
  nextElem(it)
  nextElem(it)
}

# For the foreach
system.time({
result1 <- foreach(i = 1:3) %do% {
  result()
}

for (i in 1:3) {
  maxi <- max(result1[[i]])
  print(maxi)
}
})

#For the parLapply
cl <- makeCluster(3)
clusterExport(cl, "result")
clusterEvalQ(cl, library(iterators))

system.time({
parL <- parLapply(cl, 1:3, function(i){
  result()

})

for (i in 1:3) {
  maxi <- max(parL[[i]])
  print(maxi)
}
})


# for replicate
set.seed(1234)
system.time({
result2 <- replicate(n = 3, result())

for (i in 1:3) {
  maxi <- max(result2[,i])
  print(maxi)
}
})


```
